/* tslint:disable */
/* eslint-disable */
/**
 * todo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    ResultState,
    ResultStateFromJSON,
    ResultStateToJSON,
    TodoTask,
    TodoTaskFromJSON,
    TodoTaskToJSON,
} from '../models';

export interface DeleteTodoTodoTaskRequest {
    id: string;
}

export interface GetGetTodoTaskRequest {
    id: string;
}

export interface PostCreateTodoTaskRequest {
    inlineObject?: InlineObject;
}

/**
 * no description
 */
export class TodoApi extends runtime.BaseAPI {

    /**
     * delete_todo_task
     */
    async deleteTodoTodoTaskRaw(requestParameters: DeleteTodoTodoTaskRequest): Promise<runtime.ApiResponse<ResultState>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTodoTodoTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/delete_todo_task`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultStateFromJSON(jsonValue));
    }

    /**
     * delete_todo_task
     */
    async deleteTodoTodoTask(requestParameters: DeleteTodoTodoTaskRequest): Promise<ResultState> {
        const response = await this.deleteTodoTodoTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * get_todo_task
     */
    async getGetTodoTaskRaw(requestParameters: GetGetTodoTaskRequest): Promise<runtime.ApiResponse<TodoTask>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGetTodoTask.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/get_todo_task`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TodoTaskFromJSON(jsonValue));
    }

    /**
     * get_todo_task
     */
    async getGetTodoTask(requestParameters: GetGetTodoTaskRequest): Promise<TodoTask> {
        const response = await this.getGetTodoTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     * todo_list
     */
    async getTodoListRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/todo_list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * todo_list
     */
    async getTodoList(): Promise<InlineResponse200> {
        const response = await this.getTodoListRaw();
        return await response.value();
    }

    /**
     * create_todo_task
     */
    async postCreateTodoTaskRaw(requestParameters: PostCreateTodoTaskRequest): Promise<runtime.ApiResponse<ResultState>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/create_todo_task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResultStateFromJSON(jsonValue));
    }

    /**
     * create_todo_task
     */
    async postCreateTodoTask(requestParameters: PostCreateTodoTaskRequest): Promise<ResultState> {
        const response = await this.postCreateTodoTaskRaw(requestParameters);
        return await response.value();
    }

}
